* Arrows
An extension of the Clojure (and ClojureScript) threading macros to help with manipulating nested data structures.

=[weshop/arrows "0.2.0"]=

#+BEGIN_SRC clojure
  ;; clojure, clojurescript >= 1.9.198:
  (:require [weshop.arrows :refer [->% ->>%]])

  ;; clojurescript < 1.9.198
  (:require-macros [weshop.arrows :refer [->% ->>%]])
#+END_SRC

** Problem - can't nest =#()=-style functions in Clojure:
This is a pain when you're manipulating nested structures:

#+BEGIN_SRC clojure
  (let [table [{:a 1 :b [4 12]},
               {:a 3 :b [8 35]}]]
    (map #(-> %
              ;; not allowed - #() within #()
              (update :b #(map inc %))
              (assoc :c 8))
         table))
#+END_SRC

This library provides two macros: =->%= and =->>%=, each of which create an
anonymous function that threads its argument through the provided forms in a
similar way to =->= and =->>=:

#+BEGIN_SRC clojure
  (let [table [{:a 1 :b [4 12]},
               {:a 3 :b [8 35]}]]
    (map (->% (update :b #(map inc %))
              (assoc :c 8))
         table))

  ;; transforms into:

  (let [table [{:a 1 :b [4 12]},
               {:a 3 :b [8 35]}]]
    (map (fn [m]
           (-> m
               (update :b #(map inc %))
               (assoc :c 8)))
         table))

  ;; and returns

  ;; [{:a 1, :b [5 13], :c 8},
  ;;  {:a 3, :b [9 36], :c 8}]
#+END_SRC

=->>%= behaves in a similar manner, except threads the argument as the last
parameter to the forms, like =->>=:

#+BEGIN_SRC clojure
  (let [results [[3 5 8 12], [6 45 23 18]]]
    (map (->>% (filter #(zero? (mod % 3)))
               (map #(* 2 %)))
         results))

  ;; -> [[6 24], [12 90 36]]

#+END_SRC


** Bugs/features/suggestions/questions?

Please feel free to submit bug reports/patches etc through the GitHub
repository in the usual way!

Thanks!

** License

Copyright Â© 2018 WeShop

Distributed under the Eclipse Public License, the same as Clojure.
